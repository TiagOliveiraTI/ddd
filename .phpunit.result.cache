{"version":1,"defects":{"Tests\\Unit\\Domain\\Entities\\CustomerTest::testShouldThrowErrorWhenIdIsEmpty":7,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldThrowErrorWhenNameIsEmpty":7,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldChangeName":5,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldDeactivateACustomer":7,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldCalculateTotal":7,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowAnErrorWhenOrderQuantityIsEqualZero":7,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldThrowErrorWhenIdIsEmpty":7,"Tests\\Unit\\Domain\\Entities\\OrderServiceTest::shouldCalculateTotal":8,"Tests\\Unit\\Domain\\Entities\\OrderServiceTest::shouldGetTotalOfAllOrders":8,"Tests\\Unit\\Infrastructure\\Db\\Doctrine\\Model\\ProductRepositoryTest::shouldCanCreateAProduct":8},"times":{"Tests\\Unit\\Domain\\Entities\\CustomerTest::testShouldThrowErrorWhenIdIsEmpty":0.002,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldThrowErrorWhenIdIsEmpty":0.003,"Tests\\Unit\\Domain\\Entities\\CustomerTest::givenAnEmptyId":0.003,"Tests\\Unit\\Domain\\Entities\\CustomerTest::givenAnEmptyId_when":0.002,"Tests\\Unit\\Domain\\Entities\\CustomerTest::givenAnEmptyId_When":0.003,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldThrowErrorWhenNameIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldChangeName":0,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldThrowsWhenAddressIsUndefined":0,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldActivateACustomer":0,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldDeactivateACustomer":0,"Tests\\Unit\\Domain\\Entities\\CustomerTest::shouldAddRewardPoints":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowErrorWhenIdIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowErrorWhenCustomer_IdIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowErrorWhenCustomer__IdIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowErrorWhenCustomerIdIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldCalculateTotal":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowAnErrorWhenOrderQuantityIsEqualZero":0,"Tests\\Unit\\Domain\\Entities\\OrderTest::shouldThrowErrorIfTheItemIsLessOrEqualZero":0,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldThrowErrorWhenIdIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldThrowErrorWhenNameIsEmpty":0,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldThrowErrorWhenPriceIsLessThanZero":0,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldCalculateTotal":0,"Tests\\Unit\\Domain\\Entities\\ProductTest::shouldChangePrice":0,"Tests\\Unit\\Domain\\Entities\\OrderServiceTest::shouldCalculateTotal":0.007,"Tests\\Unit\\Domain\\Entities\\OrderServiceTest::shouldPlaceAnOrder":0.004,"Tests\\Unit\\Domain\\Entities\\OrderServiceTest::shouldGetTotalOfAllOrders":0,"Tests\\Unit\\Domain\\Entities\\ProductServiceTest::shouldChangeThePricesOfAllProducts":0,"Tests\\Unit\\Domain\\Service\\OrderServiceTest::shouldPlaceAnOrder":0.005,"Tests\\Unit\\Domain\\Service\\OrderServiceTest::shouldGetTotalOfAllOrders":0,"Tests\\Unit\\Domain\\Service\\ProductServiceTest::shouldChangeThePricesOfAllProducts":0,"Tests\\Unit\\Infrastructure\\Db\\Doctrine\\Model\\ProductRepositoryTest::shouldCanCreateAProduct":0.024}}